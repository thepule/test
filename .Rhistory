tbl_Holidays_Orig$Type[tbl_Holidays_Orig$country_ID == "DE" & tbl_Holidays_Orig$Type == "Middle"] <- "N/A"
tbl_Reservation_Orig_Dest_Date$PickUp_Day<-as.Date(tbl_Reservation_Orig_Dest_Date$PickUp_Date,format="%Y-%m-%d")
tbl_Reservation_Orig_Dest_Date$Duration<-fun_Duration(prm_Origin_Country,prm_Destination_Country,tbl_Reservation_Orig_Dest_Date$rental_days)
tbl_Reservation_Orig_Dest_Date$Region<-fun_Region(prm_Origin_Country,prm_Destination_Country,tbl_Reservation_Orig_Dest_Date$DestRegion)
tbl_Reservation_Orig_Dest_Date$SubRegion<-fun_SubRegion(prm_Origin_Country,prm_Destination_Country,tbl_Reservation_Orig_Dest_Date$DestRegion)
attach(tbl_Reservation_Orig_Dest_Date)
tbl_Reservation_Orig_Dest_Date$Market<-paste(substring(as.character(Region),1,3),"D",substring(paste("0",as.character(Duration),collapse=NULL,sep=""),nchar(paste("0",as.character(Duration),collapse=NULL,sep=""))-1,nchar(paste("0",as.character(Duration),collapse=NULL,sep=""))),collapse=NULL,sep="")
tbl_Reservation_Orig_Dest_Date$SubMarket<-paste(substring(as.character(SubRegion),1,3),"D",substring(paste("0",as.character(Duration),collapse=NULL,sep=""),nchar(paste("0",as.character(Duration),collapse=NULL,sep=""))-1,nchar(paste("0",as.character(Duration),collapse=NULL,sep=""))),collapse=NULL,sep="")
detach(tbl_Reservation_Orig_Dest_Date)
# Create additional dimensions related to seasonnality
tbl_Holidays_Orig$Key<-as.Date(as.character(tbl_Holidays_Orig$Date))
tbl_Reservation_Orig_Dest_Date<-merge(tbl_Reservation_Orig_Dest_Date,tbl_Holidays_Orig[,c("Key","Type","Period")],by.x="PickUp_Day",by.y="Key",all.x=TRUE)
tbl_Reservation_Orig_Dest_Date$Week<-as.numeric(format(tbl_Reservation_Orig_Dest_Date$PickUp_Day,"%W"))
tbl_Reservation_Orig_Dest_Date$Weekday<-format(tbl_Reservation_Orig_Dest_Date$PickUp_Day,"%A")
tbl_Reservation_Orig_Dest_Date$SeasonWeek<-fun_SeasonWeek(prm_Origin_Country,prm_Destination_Country,tbl_Reservation_Orig_Dest_Date)
tbl_Reservation_Orig_Dest_Date$SeasonYear<-fun_SeasonYear(prm_Origin_Country,prm_Destination_Country,prm_Easter_Week,tbl_Reservation_Orig_Dest_Date)
### Segment Reservations data
# Filter on Net rate transactions from the original dataset
tbl_Reservation_Orig_Dest_Date_for_Elast<-subset(tbl_Reservation_Orig_Dest_Date,channel_group!="Other" & car_group!="Other" & supplier_type=="Net",drop=TRUE)
# Create additional dimensions for segmentation - Different for each geography
#tbl_Reservation_Orig_Dest_Date_for_Elast$Region<-substring(tbl_Reservation_Orig_Dest_Date_for_Elast$SubMarket,1,3)
tbl_Reservation_Orig_Dest_Date_for_Elast$Volume<-1
tbl_Reservation_Orig_Dest_Date_for_Elast$Daily_Price<-tbl_Reservation_Orig_Dest_Date_for_Elast$Price/tbl_Reservation_Orig_Dest_Date_for_Elast$rental_days
tbl_Reservation_Orig_Dest_Date_for_Elast$Daily_Base<-tbl_Reservation_Orig_Dest_Date_for_Elast$Base/tbl_Reservation_Orig_Dest_Date_for_Elast$rental_days
attach(tbl_Reservation_Orig_Dest_Date_for_Elast)
tbl_Reservation_Orig_Dest_Date_for_Elast$Segment<-paste(SubMarket,"_",substring(as.character(channel_group),1,1),substring(as.character(car_group),1,1),substring(as.character(SeasonWeek),1,1),substring(as.character(SeasonYear),1,1),collapse=NULL,sep="")
detach(tbl_Reservation_Orig_Dest_Date_for_Elast)
# Create Elasticity input
tbl_Elasticity_Input<-tbl_Reservation_Orig_Dest_Date_for_Elast[,c("Segment","PickUp_Date","Volume","Daily_Price","Daily_Base","rental_days")]
names(tbl_Elasticity_Input)<-c("Segment","Day","Volume","Price","Base","Duration")
tbl_Elasticity_Input$Markup<-tbl_Elasticity_Input$Price-tbl_Elasticity_Input$Base
tbl_Elasticity_Input$Season<-substring(tbl_Elasticity_Input$Segment,10,11)
tbl_Elasticity_Output<-vector()
prm_Segment_List_HL <- unique(tbl_Reservation_Orig_Dest_Date_for_Elast$Segment)
prm_Segment_List <- prm_Segment_List_HL
for (i in 1:length(prm_Segment_List)) {
prm_Segment_List_HL_temp <- prm_Segment_List_HL[substring(prm_Segment_List_HL,1,11) == prm_Segment_List[i]] # Modifying the interval I can modify the aggregation e.g. 1 to 9 excludes season
tbl_Elasticity_Output_temp_ini <- data.frame(prm_Origin_Country,prm_Destination_Country,substring(prm_Segment_List_HL_temp,1,11),matrix(0,length(prm_Segment_List_HL_temp),2),substring(prm_Segment_List_HL_temp,10,11),matrix(0,length(prm_Segment_List_HL_temp),3))
names(tbl_Elasticity_Output_temp_ini)<-c("Country_Orig","Country_Dest","Segment","Model_R2","Elasticity","Season","Avg_Price","Avg_Base","Volume")
tbl_Elasticity_Input_Segment <- subset(tbl_Elasticity_Input, substring(Segment,1,nchar(Segment)) == prm_Segment_List[i])
prm_Volume<-nrow(tbl_Elasticity_Input_Segment)
if (prm_Volume>0) {
# Remove base rate variation within each season
prm_avg_base<-as.data.frame(aggregate(tbl_Elasticity_Input_Segment$Base,list(tbl_Elasticity_Input_Segment$Season),mean),stringsAsFactors=FALSE)
names(prm_avg_base)<-c("Season","Avg_Base")
tbl_Elasticity_Input_Segment<-merge(tbl_Elasticity_Input_Segment,prm_avg_base,by=c("Season"))
tbl_Elasticity_Input_Segment$Price<-tbl_Elasticity_Input_Segment$Avg_Base+tbl_Elasticity_Input_Segment$Markup
# Sort and create variables
tbl_Elasticity_Input_Segment_Sort<-tbl_Elasticity_Input_Segment[order(-tbl_Elasticity_Input_Segment$Price),]
tbl_Elasticity_Input_Segment_Sort$Volume_Cum<-cumsum(tbl_Elasticity_Input_Segment_Sort$Volume)
if (nrow(prm_avg_base)>1) {
# Model Price Elasticity of Demand (PED)
mdl_PED<-lm(log(tbl_Elasticity_Input_Segment_Sort$Volume_Cum)~tbl_Elasticity_Input_Segment_Sort$Price+tbl_Elasticity_Input_Segment_Sort$Season)
} else {
# Model Price Elasticity of Demand (PED) when only one season with data
mdl_PED<-lm(log(tbl_Elasticity_Input_Segment_Sort$Volume_Cum)~tbl_Elasticity_Input_Segment_Sort$Price)
}
prm_PED_elasticity<-mdl_PED$coefficients[2]
prm_PED_R2<-summary(mdl_PED)$adj.r.squared
DTSegment<-data.table(tbl_Elasticity_Input_Segment_Sort)
tbl_Elasticity_Output_temp_calc<-as.data.frame(DTSegment[,list(Avg_Price=mean(Price),Avg_Base=mean(Base),Volume=sum(Volume)),by=c("Season")],stringsAsFactors=FALSE)
tbl_Elasticity_Output_temp_calc<-cbind(prm_Origin_Country,prm_Destination_Country,prm_Segment_List[i],prm_PED_R2,prm_PED_elasticity,tbl_Elasticity_Output_temp_calc)
} else {
prm_PED_elasticity<-NA
prm_PED_R2<-NA
#tbl_Elasticity_Output_temp_calc<-data.frame(prm_Origin_Country,prm_Destination_Country,substring(prm_Segment_List_HL_temp,1,9),matrix(NA,length(prm_Segment_List_HL_temp),2),substring(prm_Segment_List_HL_temp,10,11),matrix(0,length(prm_Segment_List_HL_temp),3))
tbl_Elasticity_Output_temp_calc<-data.frame(prm_Origin_Country,prm_Destination_Country,substring(prm_Segment_List_HL_temp,1,11),matrix(NA,length(prm_Segment_List_HL_temp),2),substring(prm_Segment_List_HL_temp,10,11),matrix(0,length(prm_Segment_List_HL_temp),3))
}
names(tbl_Elasticity_Output_temp_calc)<-c("Country_Orig","Country_Dest","Segment","Model_R2","Elasticity","Season","Avg_Price","Avg_Base","Volume")
tbl_Elasticity_Output_temp_append<-rbind(tbl_Elasticity_Output_temp_ini,tbl_Elasticity_Output_temp_calc)
DTSegment2<-data.table(tbl_Elasticity_Output_temp_append)
tbl_Elasticity_Output_temp<-as.data.frame(DTSegment2[,list(Avg_Price=sum(Avg_Price),Avg_Base=sum(Avg_Base),Volume=sum(Volume)),by=c("Country_Orig","Country_Dest","Segment","Season")],stringsAsFactors=FALSE)
tbl_Elasticity_Output_temp$Model_R2<-prm_PED_R2
tbl_Elasticity_Output_temp$Elasticity<-prm_PED_elasticity
tbl_Elasticity_Output_temp$Volume_Segment<-prm_Volume
tbl_Elasticity_Output_temp$Quality_Check<-ifelse(is.na(tbl_Elasticity_Output_temp$Model_R2) | tbl_Elasticity_Output_temp$Model_R2<=0.5 | tbl_Elasticity_Output_temp$Volume_Segment<10, 0, 1)
tbl_Elasticity_Output<-rbind(tbl_Elasticity_Output,tbl_Elasticity_Output_temp)
}
names(tbl_Elasticity_Output)
tbl_Elasticity_Output$Market<-substring(tbl_Elasticity_Output$Segment,1,6)
DT4<-data.table(subset(tbl_Elasticity_Output,Quality_Check==1,drop=TRUE))
tbl_Elasticity_Market<-as.data.frame(DT4[, list(Total_Volume_Elasticity=sum(Elasticity*Volume*Avg_Price),Total_Volume=sum(Volume*Avg_Price)), by = c("Market")],stringsAsFactors=FALSE)
tbl_Elasticity_Output<-merge(tbl_Elasticity_Output,tbl_Elasticity_Market,by=c("Market"),all.x=TRUE)
tbl_Elasticity_Output$Model_R2<-ifelse(tbl_Elasticity_Output$Quality_Check==0, "approx", as.character(tbl_Elasticity_Output$Model_R2))
tbl_Elasticity_Output$Elasticity<-ifelse(tbl_Elasticity_Output$Quality_Check==0, tbl_Elasticity_Output$Total_Volume_Elasticity/tbl_Elasticity_Output$Total_Volume, tbl_Elasticity_Output$Elasticity)
tbl_Elasticity_Output<-tbl_Elasticity_Output[,c("Country_Orig","Country_Dest","Segment","Volume_Segment","Model_R2","Elasticity","Avg_Price","Avg_Base","Volume")]
View(tbl_Elasticity_Output)
View(tbl_Elasticity_Market)
tbl_Reservation_Orig_Dest_Date$SubChannel
source('C:/Users/fpuletti/Desktop/Elasticity recalculation/Easter VS non Easter/Price Elastic Demand Forecast Engine - Functions v015.r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Elasticity recalculation/Easter VS non Easter/Main_el_easter_vs_noneaster.R', echo=TRUE)
save.image("C:/Users/fpuletti/Desktop/Elasticity recalculation/Easter VS non Easter/data.RData")
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine - Functions v014.r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine v015(FP).r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Elasticity-Only Optimisation ED v013 (FP).R', echo=TRUE)
write.table(tbl_Optimisation_Inputs, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
write.table(tbl_Optimisation_Inputs, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine v015(FP).r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Elasticity-Only Optimisation ED v013 (FP).R', echo=TRUE)
min(tbl_Optimisation_Inputs$Day)
max(tbl_Optimisation_Inputs$Day)
unique(tbl_Optimisation_Inputs$Corridor)
paste0(today(), "_gvm_const_")
write.table(tbl_Optimisation_Inputs, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine - Functions v014.r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine v015(FP).r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine v015(FP).r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Elasticity-Only Optimisation ED v012 (PAK).R', echo=TRUE)
write.table(tbl_Price_Optim_Output, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
Save_File<- paste0(Path_Name,"Daily_Dashboard_Targets_",File_Name,".csv")
write.table(tbl_Optimisation_Inputs, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
debugSource('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Elasticity-Only Optimisation ED v012 (PAK).R', echo=TRUE)
tbl_Price_Optim_Output_QueryTime<-tbl_Optimisation_Inputs[,c("Country_Orig","Country_Dest","Model_Date","SubSegment","Day","Elasticity","Coefficient_Price_Ex_Duration" , "Coefficient_Non_Price_on_BR", "Coefficient_Non_Price_Insurance", "Coefficient_Non_Price_Other")]
names(tbl_Price_Optim_Output_QueryTime)<-c("Country_Orig","Country_Dest","Model_Date","Segment","Day","Elasticity","Coeff_PexD","Coeff_NP_BRexD","Coeff_NP_InsexD","Coeff_NP_Other")
View(tbl_Price_Optim_Output_QueryTime)
Save_File<- paste0(Path_Name,"Uplift_Transfer_QT_RD_Daily_Absolute_Over_UnOptPrice_",File_Name,".csv")
write.table(tbl_Price_Optim_Output_QueryTime, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
#Recommendation file for CarTrawler Data Science query-time optimisation (add back offline info on segments)
tbl_Price_Optim_Output<-tbl_Optimisation_Inputs[,c("Country_Orig","Country_Dest","Model_Date","SubSegment","Day","Base","Price","Volume_SubSegment","Price_Optimal_Constraint","Optimal_Volume_Constraint","Optimal_Markup_CurrentPrice_Abs_Constraint","Elasticity","Coefficient_Price_Ex_Duration" , "Coefficient_Non_Price_on_BR", "Coefficient_Non_Price_Insurance", "Coefficient_Non_Price_Other")]
names(tbl_Price_Optim_Output)<-c("Country_Orig","Country_Dest","Model_Date","Segment","Day","Avg_Cost","Avg_Price","Volume_Forecast","Optimal_Price_Constrained","Optimal_Volume_Constrained","Price_Change_Offline","Elasticity","Coeff_PexD","Coeff_NP_BRexD","Coeff_NP_InsexD","Coeff_NP_Other")
View(tbl_Price_Optim_Output)
if(Recommendation_Type=="From_UnOptPrice")
{
Save_File<- paste0(Path_Name,"Uplift_Transfer_QT_DS_Daily_Absolute_Over_UnOptPrice_",File_Name,".csv")
write.table(tbl_Price_Optim_Output, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
}
if(Recommendation_Type=="From_BR")
{
tbl_Price_Optim_Output$Price_Change<-tbl_Price_Optim_Output$Optimal_Price_Constrained-tbl_Price_Optim_Output$Avg_Cost
names(tbl_Price_Optim_Output)<-c("Country_Orig","Country_Dest","Model_Date","Segment","Day","Avg_Cost","Avg_Price","Volume_Forecast","Optimal_Price_Constrained","Optimal_Volume_Constrained","BR_Markup_Offline","Elasticity","Coeff_PexD","Coeff_NP_BRexD","Coeff_NP_InsexD","Coeff_NP_Other")
Save_File<- paste0(Path_Name,"Uplift_Transfer_QT_DS_Daily_Absolute_Over_BR_",File_Name,".csv")
write.table(tbl_Price_Optim_Output, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
}
#File for AB-Test script (combined format able to handle offline and query-time optimisation)
tbl_Price_Optim_Output<-tbl_Optimisation_Inputs[,c("Country_Orig","Country_Dest","SubSegment","Day","Optimal_Markup_CurrentPrice_Abs_Constraint","Elasticity","Elasticity","Coefficient_Price_Ex_Duration" , "Coefficient_Non_Price_on_BR", "Coefficient_Non_Price_Insurance", "Coefficient_Non_Price_Other")]
names(tbl_Price_Optim_Output)<-c("Country_Orig","Country_Dest","Segment","Day","Price_Change","Elasticity_Parameter","Elasticity","Coeff_PexD","Coeff_NP_BRexD","Coeff_NP_InsexD","Coeff_NP_Other")
if(Recommendation_Type=="From_UnOptPrice")
{
Save_File<- paste0(Path_Name,"AB_Test_Recommendation_Absolute_Over_UnOptPrice_",File_Name,".csv")
write.table(tbl_Price_Optim_Output, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
}
if(Recommendation_Type=="From_BR")
{
tbl_Price_Optim_Output$Price_Change<-tbl_Price_Optim_Output$Optimal_Price_Constrained-tbl_Price_Optim_Output$Avg_Cost
names(tbl_Price_Optim_Output)<-c("Country_Orig","Country_Dest","Model_Date","Segment","Day","Avg_Cost","Avg_Price","Volume_Forecast","Optimal_Price_Constrained","Optimal_Volume_Constrained","BR_Markup")
Save_File<- paste0(Path_Name,"AB_Test_Recommendation_Absolute_Over_BR_",File_Name,".csv")
write.table(tbl_Price_Optim_Output, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
}
#Fixed input file for Daily Dashboard
tbl_Optimisation_Inputs$GVM_Price <-  + tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgDuration * tbl_Optimisation_Inputs$Price_Optimal_Constraint
tbl_Optimisation_Inputs$GVM_BaseRate <-  - tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgDuration * tbl_Optimisation_Inputs$Base
tbl_Optimisation_Inputs$GVM_FlatCommission <-  - tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgDuration * tbl_Optimisation_Inputs$Price_Optimal_Constraint * tbl_Optimisation_Inputs$FlatCommRate
tbl_Optimisation_Inputs$GVM_RevenueShare <-  - tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgDuration * (tbl_Optimisation_Inputs$Price_Optimal_Constraint - tbl_Optimisation_Inputs$Base)* tbl_Optimisation_Inputs$RevShareRate
tbl_Optimisation_Inputs$GVM_ProcessingFee <-  + tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgDuration * (tbl_Optimisation_Inputs$PrepaidRate * tbl_Optimisation_Inputs$Price_Optimal_Constraint + tbl_Optimisation_Inputs$PartpaidRate * ( tbl_Optimisation_Inputs$Price_Optimal_Constraint -tbl_Optimisation_Inputs$Base)) * tbl_Optimisation_Inputs$RevShareRate * tbl_Optimisation_Inputs$ProcFeeRate
tbl_Optimisation_Inputs$GVM_BankCommission <-  - tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgDuration * (tbl_Optimisation_Inputs$PrepaidRate * tbl_Optimisation_Inputs$Price_Optimal_Constraint + tbl_Optimisation_Inputs$PartpaidRate * ( tbl_Optimisation_Inputs$Price_Optimal_Constraint -tbl_Optimisation_Inputs$Base)) * tbl_Optimisation_Inputs$BankCommRate
tbl_Optimisation_Inputs$GVM_Breakage <-  + tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgDuration * tbl_Optimisation_Inputs$BreakageRate * tbl_Optimisation_Inputs$Base
tbl_Optimisation_Inputs$GVM_Insurance <-  + tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgDuration * tbl_Optimisation_Inputs$AvgDailyInsurance * tbl_Optimisation_Inputs$InsuranceRate
tbl_Optimisation_Inputs$GVM_Rebate <-  + tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgRebate
tbl_Optimisation_Inputs$GVM_Meta <-  - tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgMetaCost
tbl_Optimisation_Inputs$GVM_CustomerServ <-  - tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgCustomerServ
tbl_Optimisation_Inputs$GVM_Marketing <-  - tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgMarketingCost
tbl_Optimisation_Inputs$GVM_Affiliates <-  - tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgAffiliatesCost
tbl_Optimisation_Inputs$GVM_PPC <-  - tbl_Optimisation_Inputs$Optimal_Volume_Constraint * tbl_Optimisation_Inputs$AvgPPCCost
tbl_Optimisation_Inputs$Baseline_GVM <-tbl_Optimisation_Inputs$Coefficient_Price * tbl_Optimisation_Inputs$Price* exp(tbl_Optimisation_Inputs$Elasticity * tbl_Optimisation_Inputs$Price) +  tbl_Optimisation_Inputs$Coefficient_Non_Price * exp(tbl_Optimisation_Inputs$Elasticity * tbl_Optimisation_Inputs$Price)
tbl_Optimisation_Inputs$Optimised_GVM <- tbl_Optimisation_Inputs$Coefficient_Price * tbl_Optimisation_Inputs$Price_Optimal_Constraint* exp(tbl_Optimisation_Inputs$Elasticity * tbl_Optimisation_Inputs$Price_Optimal_Constraint) +  tbl_Optimisation_Inputs$Coefficient_Non_Price * exp(tbl_Optimisation_Inputs$Elasticity * tbl_Optimisation_Inputs$Price_Optimal_Constraint)
Save_File<- paste0(Path_Name,"Daily_Dashboard_Targets_",File_Name,".csv")
write.table(tbl_Optimisation_Inputs, file = Save_File, sep = ",", col.names = TRUE,row.names=FALSE)
}
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine - Functions v014.r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine v015(FP).r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine v015(FP).r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine - Functions v014.r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Price Elastic Demand Forecast Engine v015(FP).r', echo=TRUE)
source('C:/Users/fpuletti/Desktop/Price Optimization/Future Demand Forecast/Elasticity-Only Optimisation ED v013 (FP).R', echo=TRUE)
class(c(1,2,a,b))
class(c(1,2))
class(c(1,2,a))
class(c(1,2,"a"))
swirl()
install.packages(swirl)
install.packages("swirl")
library(swirl)
swirl()
source('~/.active-rstudio-document', echo=TRUE)
makeVector(c(1:10))
source('~/.active-rstudio-document', echo=TRUE)
cachemean(1:10)
cachemean(c(1:10))
?numeric
cachemean(1)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
set(2)
set <- function(y) {
x <<- y
m <<- NULL
}
set(2)
set(2)
setmean <- function(mean) m <<- mean
setmean(3)
getmean <- function() m
getmean
m <- x$getmean()
source('~/.active-rstudio-document', echo=TRUE)
cachemean()
df <- data.frame(c(1,2,3), c(1,2,3))
df
cachemean(df)
source('~/.active-rstudio-document', echo=TRUE)
v <- makeVector(c(1,2,3,4))
v <- makeVector(c(1:4))
v
v$set()
v$get()
v$getmean()
cachemean(v)
v$getmean()
cachemean(v)
source('~/.active-rstudio-document', echo=TRUE)
v$get()
v$getmean()
v$get()
v$getmean()
v$setmean(20)
v$getmean()
v$set(c(1:10))
v$get()
v$getmean()
cachemean(v)
v$set(c(1:10))
v$getmean()
ls()
source('~/.active-rstudio-document', echo=TRUE)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector(c(1:4))
v$get()
v$getmean()
v$setmean(20)
v$set(c(1:10))
v$getmean()
cachemean(v)
mean(c(1:10))
ma <- matrix(c(1:16), 4,4)
ma
solve(ma)
ma <- matrix(c(0:15), 4,4)
solve(ma)
ma <- matrix(c(1,1,1,1,1,2,1,4,1,1,1,2,1,2,0,3), 4,4)
solve(ma)
makeVector <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setmean <- function(inverse) inv <<- mean
getmean <- function() inv
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setmean <- function(inverse) inv <<- mean
getmean <- function() inv
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
ma <- matrix(c(1,1,1,1,1,2,1,4,1,1,1,2,1,2,0,3), 4,4)
makeMatrix(ma)
test <- makeMatrix(ma)
test$get()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cacheinverse(test)
solve(ma)
test$getinverse()
test$get()
source('~/.active-rstudio-document', echo=TRUE)
test$set(matrix(c(1,2,1,2),2,2))
test$get()
test$getinverse()
cacheinverse(test)
test$set(matrix(c(2,2,3,2),2,2))
test$get()
test$getinverse()
cacheinverse(test)
test$getinverse()
test$setinverse(matrix(1,1,1,1), 2,2)
test$setinverse(matrix(c(1,1,1,1),2,2))
test$getinverse()
test$set(matrix(c(2,2,3,2),2,2))
test$get()
test$getinverse()
cacheinverse(test)
test$getinverse()
source('C:/Users/fpuletti/Desktop/coursera/datasciencecourse/course2assignment2.R', echo=TRUE)
t <- makeCacheMatrix(ma)
cacheSolve(t)
t$getinverse()
cacheSolve(t)
t$get()
t$set(matrix(c(2,2,3,2), 2,2))
t$getinverse()
t$get()
cacheSolve(t)
cacheSolve(t)
t$getinverse()
t$setinverse(1)
t$getinverse()
t$set(matrix(c(2,2,3,2), 2,2))
cacheSolve(t)
cacheSolve(t)
source('C:/Users/fpuletti/Desktop/coursera/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(ma)
t <- makeCacheMatrix(ma)
cacheSolve(t)
t$get()
t$getinverse()
t$set(matrix(c(2,2,3,2),2,2))
t$getinverse()
cacheSolve(t)
t$getinverse()
t$get()
t$set(1)
t$get()
v <- c("7367571da65fe68782088457a503ef2df79a5ceb")
nchar(v)
library(swirl)
swirl()
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size = 100, prob = 0.7)
flips2 <- rbinom(100,size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnomr(10)
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5,10)
?replicate
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
?colMeans
hist(cm)
data(cars)
help(cars)
head(cars)
plot(cars)
?plot
View(cars)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed )
plot(x = cars$dist, y = cars$speed, xlab = "Speed" )
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
setwd("C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data")
Outcome <- read.csv("outcome-of-care-measures.csv", stringsAsFactors = F)
glimpse(Outcome)
?ncol
names(Outcome)
source('~/.active-rstudio-document', echo=TRUE)
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
best("NY", "hert attack")
options(error = NULL)
best("NY", "hert attack")
geterrmessage()
traceback()
View(Outcome)
hospital_frame <- Outcome[,c(2,outcome_selector)]
names(hospital_frame) <- c("name", "outcome")
outcome_selector <- 13
hospital_frame <- Outcome[,c(2,outcome_selector)]
names(hospital_frame) <- c("name", "outcome")
hospital_frame <- hospital_frame[hospital_frame$outcome != "Not Available" ,]
hospital_frame$outcome <- as.numeric(hospital_frame$outcome)
View(hospital_frame)
order(hospital_frame$outcome)
hospital_frame <- hospital_frame[order(hospital_frame$outcome),]
View(hospital_frame)
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
?order
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
rankhospital("TX", "heart failure", 4)
Outcome <- read.csv("outcome-of-care-measures.csv", stringsAsFactors = F)
state <- "TX"
Outcome <- Outcome[Outcome$State == state,]
outcome <- "heart failure"
outcome_selector <- switch(outcome,
"heart attack" = 13,
"heart failure" = 19,
"pneumonia" = 25)
hospital_frame <- Outcome[,c(2,outcome_selector)]
View(hospital_frame)
names(hospital_frame) <- c("name", "outcome")
hospital_frame <- hospital_frame[hospital_frame$outcome != "Not Available" ,]
hospital_frame$outcome <- as.numeric(hospital_frame$outcome)
hospital_frame <- hospital_frame[order(hospital_frame$outcome, hospital_frame$name),]
hospital_frame <- hospital_frame[order(hospital_frame$outcome, hospital_frame$name, decreasing = T),]
hospital_frame <- hospital_frame[order(hospital_frame$outcome, decreasing = T),]
View(Outcome)
names(Outcome)
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
View(Outcome[Outcome$Hospital.Name == "FORT DUNCAN MEDICAL CENTER"])
Outcome <- read.csv("outcome-of-care-measures.csv", stringsAsFactors = F)
View(Outcome[Outcome$Hospital.Name == "FORT DUNCAN MEDICAL CENTER"])
View(Outcome[Outcome$Hospital.Name == "FORT DUNCAN MEDICAL CENTER",])
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
View(hospital_frame)
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
hospital_frame$name
hospital_frame$name[rank]
hospital_frame$name[4]
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
hospital_frame$name
View(hospital_frame)
hospital_frame$name[4]
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
hospital_frame$name[4]
rankhospital("TX", "heart failure", 4)
hospital_frame$name[rank]
hospital_frame$name[4]
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
hospital_frame$name[4]
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
View(hospital_frame)
rankhospital("TX", "heart failure", 4)
source('C:/Users/fpuletti/Desktop/coursera/rprog-data-ProgAssignment3-data/best.R', echo=TRUE)
rankhospital("TX", "heart failure", 4)
